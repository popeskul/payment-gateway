// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/popeskul/payment-gateway/internal/core/ports (interfaces: AuthConfig,TokenStore,JWTManager,PasswordHasher)
//
// Generated by this command:
//
//	mockgen -destination=auth_mock.go -package=ports github.com/popeskul/payment-gateway/internal/core/ports AuthConfig,TokenStore,JWTManager,PasswordHasher
//

// Package ports is a generated GoMock package.
package ports

import (
	reflect "reflect"

	domain "github.com/popeskul/payment-gateway/internal/domain"
	gomock "go.uber.org/mock/gomock"
)

// MockAuthConfig is a mock of AuthConfig interface.
type MockAuthConfig struct {
	ctrl     *gomock.Controller
	recorder *MockAuthConfigMockRecorder
}

// MockAuthConfigMockRecorder is the mock recorder for MockAuthConfig.
type MockAuthConfigMockRecorder struct {
	mock *MockAuthConfig
}

// NewMockAuthConfig creates a new mock instance.
func NewMockAuthConfig(ctrl *gomock.Controller) *MockAuthConfig {
	mock := &MockAuthConfig{ctrl: ctrl}
	mock.recorder = &MockAuthConfigMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockAuthConfig) EXPECT() *MockAuthConfigMockRecorder {
	return m.recorder
}

// GetAccessTokenSecret mocks base method.
func (m *MockAuthConfig) GetAccessTokenSecret() string {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetAccessTokenSecret")
	ret0, _ := ret[0].(string)
	return ret0
}

// GetAccessTokenSecret indicates an expected call of GetAccessTokenSecret.
func (mr *MockAuthConfigMockRecorder) GetAccessTokenSecret() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetAccessTokenSecret", reflect.TypeOf((*MockAuthConfig)(nil).GetAccessTokenSecret))
}

// GetAccessTokenTTL mocks base method.
func (m *MockAuthConfig) GetAccessTokenTTL() int {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetAccessTokenTTL")
	ret0, _ := ret[0].(int)
	return ret0
}

// GetAccessTokenTTL indicates an expected call of GetAccessTokenTTL.
func (mr *MockAuthConfigMockRecorder) GetAccessTokenTTL() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetAccessTokenTTL", reflect.TypeOf((*MockAuthConfig)(nil).GetAccessTokenTTL))
}

// GetRefreshTokenSecret mocks base method.
func (m *MockAuthConfig) GetRefreshTokenSecret() string {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetRefreshTokenSecret")
	ret0, _ := ret[0].(string)
	return ret0
}

// GetRefreshTokenSecret indicates an expected call of GetRefreshTokenSecret.
func (mr *MockAuthConfigMockRecorder) GetRefreshTokenSecret() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetRefreshTokenSecret", reflect.TypeOf((*MockAuthConfig)(nil).GetRefreshTokenSecret))
}

// GetRefreshTokenTTL mocks base method.
func (m *MockAuthConfig) GetRefreshTokenTTL() int {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetRefreshTokenTTL")
	ret0, _ := ret[0].(int)
	return ret0
}

// GetRefreshTokenTTL indicates an expected call of GetRefreshTokenTTL.
func (mr *MockAuthConfigMockRecorder) GetRefreshTokenTTL() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetRefreshTokenTTL", reflect.TypeOf((*MockAuthConfig)(nil).GetRefreshTokenTTL))
}

// MockTokenStore is a mock of TokenStore interface.
type MockTokenStore struct {
	ctrl     *gomock.Controller
	recorder *MockTokenStoreMockRecorder
}

// MockTokenStoreMockRecorder is the mock recorder for MockTokenStore.
type MockTokenStoreMockRecorder struct {
	mock *MockTokenStore
}

// NewMockTokenStore creates a new mock instance.
func NewMockTokenStore(ctrl *gomock.Controller) *MockTokenStore {
	mock := &MockTokenStore{ctrl: ctrl}
	mock.recorder = &MockTokenStoreMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockTokenStore) EXPECT() *MockTokenStoreMockRecorder {
	return m.recorder
}

// DeleteRefreshToken mocks base method.
func (m *MockTokenStore) DeleteRefreshToken(arg0, arg1 string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteRefreshToken", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteRefreshToken indicates an expected call of DeleteRefreshToken.
func (mr *MockTokenStoreMockRecorder) DeleteRefreshToken(arg0, arg1 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteRefreshToken", reflect.TypeOf((*MockTokenStore)(nil).DeleteRefreshToken), arg0, arg1)
}

// IsRefreshTokenValid mocks base method.
func (m *MockTokenStore) IsRefreshTokenValid(arg0, arg1 string) bool {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "IsRefreshTokenValid", arg0, arg1)
	ret0, _ := ret[0].(bool)
	return ret0
}

// IsRefreshTokenValid indicates an expected call of IsRefreshTokenValid.
func (mr *MockTokenStoreMockRecorder) IsRefreshTokenValid(arg0, arg1 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "IsRefreshTokenValid", reflect.TypeOf((*MockTokenStore)(nil).IsRefreshTokenValid), arg0, arg1)
}

// StoreRefreshToken mocks base method.
func (m *MockTokenStore) StoreRefreshToken(arg0, arg1 string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "StoreRefreshToken", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// StoreRefreshToken indicates an expected call of StoreRefreshToken.
func (mr *MockTokenStoreMockRecorder) StoreRefreshToken(arg0, arg1 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "StoreRefreshToken", reflect.TypeOf((*MockTokenStore)(nil).StoreRefreshToken), arg0, arg1)
}

// MockJWTManager is a mock of JWTManager interface.
type MockJWTManager struct {
	ctrl     *gomock.Controller
	recorder *MockJWTManagerMockRecorder
}

// MockJWTManagerMockRecorder is the mock recorder for MockJWTManager.
type MockJWTManagerMockRecorder struct {
	mock *MockJWTManager
}

// NewMockJWTManager creates a new mock instance.
func NewMockJWTManager(ctrl *gomock.Controller) *MockJWTManager {
	mock := &MockJWTManager{ctrl: ctrl}
	mock.recorder = &MockJWTManagerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockJWTManager) EXPECT() *MockJWTManagerMockRecorder {
	return m.recorder
}

// GenerateTokenPair mocks base method.
func (m *MockJWTManager) GenerateTokenPair(arg0 string) (string, string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GenerateTokenPair", arg0)
	ret0, _ := ret[0].(string)
	ret1, _ := ret[1].(string)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// GenerateTokenPair indicates an expected call of GenerateTokenPair.
func (mr *MockJWTManagerMockRecorder) GenerateTokenPair(arg0 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GenerateTokenPair", reflect.TypeOf((*MockJWTManager)(nil).GenerateTokenPair), arg0)
}

// InvalidateRefreshToken mocks base method.
func (m *MockJWTManager) InvalidateRefreshToken(arg0, arg1 string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "InvalidateRefreshToken", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// InvalidateRefreshToken indicates an expected call of InvalidateRefreshToken.
func (mr *MockJWTManagerMockRecorder) InvalidateRefreshToken(arg0, arg1 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "InvalidateRefreshToken", reflect.TypeOf((*MockJWTManager)(nil).InvalidateRefreshToken), arg0, arg1)
}

// RefreshTokens mocks base method.
func (m *MockJWTManager) RefreshTokens(arg0, arg1 string) (string, string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "RefreshTokens", arg0, arg1)
	ret0, _ := ret[0].(string)
	ret1, _ := ret[1].(string)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// RefreshTokens indicates an expected call of RefreshTokens.
func (mr *MockJWTManagerMockRecorder) RefreshTokens(arg0, arg1 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RefreshTokens", reflect.TypeOf((*MockJWTManager)(nil).RefreshTokens), arg0, arg1)
}

// ValidateAccessToken mocks base method.
func (m *MockJWTManager) ValidateAccessToken(arg0 string) (*domain.Claims, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ValidateAccessToken", arg0)
	ret0, _ := ret[0].(*domain.Claims)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ValidateAccessToken indicates an expected call of ValidateAccessToken.
func (mr *MockJWTManagerMockRecorder) ValidateAccessToken(arg0 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ValidateAccessToken", reflect.TypeOf((*MockJWTManager)(nil).ValidateAccessToken), arg0)
}

// MockPasswordHasher is a mock of PasswordHasher interface.
type MockPasswordHasher struct {
	ctrl     *gomock.Controller
	recorder *MockPasswordHasherMockRecorder
}

// MockPasswordHasherMockRecorder is the mock recorder for MockPasswordHasher.
type MockPasswordHasherMockRecorder struct {
	mock *MockPasswordHasher
}

// NewMockPasswordHasher creates a new mock instance.
func NewMockPasswordHasher(ctrl *gomock.Controller) *MockPasswordHasher {
	mock := &MockPasswordHasher{ctrl: ctrl}
	mock.recorder = &MockPasswordHasherMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockPasswordHasher) EXPECT() *MockPasswordHasherMockRecorder {
	return m.recorder
}

// ComparePasswordAndHash mocks base method.
func (m *MockPasswordHasher) ComparePasswordAndHash(arg0, arg1 string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ComparePasswordAndHash", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// ComparePasswordAndHash indicates an expected call of ComparePasswordAndHash.
func (mr *MockPasswordHasherMockRecorder) ComparePasswordAndHash(arg0, arg1 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ComparePasswordAndHash", reflect.TypeOf((*MockPasswordHasher)(nil).ComparePasswordAndHash), arg0, arg1)
}

// HashPassword mocks base method.
func (m *MockPasswordHasher) HashPassword(arg0 string) (string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "HashPassword", arg0)
	ret0, _ := ret[0].(string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// HashPassword indicates an expected call of HashPassword.
func (mr *MockPasswordHasherMockRecorder) HashPassword(arg0 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "HashPassword", reflect.TypeOf((*MockPasswordHasher)(nil).HashPassword), arg0)
}

// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/popeskul/payment-gateway/internal/core/ports (interfaces: Services,MerchantService,AcquiringBank,PaymentService,RefundService,UserService)
//
// Generated by this command:
//
//	mockgen -destination=service_mock.go -package=ports github.com/popeskul/payment-gateway/internal/core/ports Services,MerchantService,AcquiringBank,PaymentService,RefundService,UserService
//

// Package ports is a generated GoMock package.
package ports

import (
	context "context"
	reflect "reflect"
	time "time"

	merchant "github.com/popeskul/payment-gateway/internal/core/domain/merchant"
	payment "github.com/popeskul/payment-gateway/internal/core/domain/payment"
	refund "github.com/popeskul/payment-gateway/internal/core/domain/refund"
	user "github.com/popeskul/payment-gateway/internal/core/domain/user"
	gomock "go.uber.org/mock/gomock"
)

// MockServices is a mock of Services interface.
type MockServices struct {
	ctrl     *gomock.Controller
	recorder *MockServicesMockRecorder
}

// MockServicesMockRecorder is the mock recorder for MockServices.
type MockServicesMockRecorder struct {
	mock *MockServices
}

// NewMockServices creates a new mock instance.
func NewMockServices(ctrl *gomock.Controller) *MockServices {
	mock := &MockServices{ctrl: ctrl}
	mock.recorder = &MockServicesMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockServices) EXPECT() *MockServicesMockRecorder {
	return m.recorder
}

// Merchants mocks base method.
func (m *MockServices) Merchants() MerchantService {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Merchants")
	ret0, _ := ret[0].(MerchantService)
	return ret0
}

// Merchants indicates an expected call of Merchants.
func (mr *MockServicesMockRecorder) Merchants() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Merchants", reflect.TypeOf((*MockServices)(nil).Merchants))
}

// Payments mocks base method.
func (m *MockServices) Payments() PaymentService {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Payments")
	ret0, _ := ret[0].(PaymentService)
	return ret0
}

// Payments indicates an expected call of Payments.
func (mr *MockServicesMockRecorder) Payments() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Payments", reflect.TypeOf((*MockServices)(nil).Payments))
}

// Refunds mocks base method.
func (m *MockServices) Refunds() RefundService {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Refunds")
	ret0, _ := ret[0].(RefundService)
	return ret0
}

// Refunds indicates an expected call of Refunds.
func (mr *MockServicesMockRecorder) Refunds() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Refunds", reflect.TypeOf((*MockServices)(nil).Refunds))
}

// Users mocks base method.
func (m *MockServices) Users() UserService {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Users")
	ret0, _ := ret[0].(UserService)
	return ret0
}

// Users indicates an expected call of Users.
func (mr *MockServicesMockRecorder) Users() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Users", reflect.TypeOf((*MockServices)(nil).Users))
}

// MockMerchantService is a mock of MerchantService interface.
type MockMerchantService struct {
	ctrl     *gomock.Controller
	recorder *MockMerchantServiceMockRecorder
}

// MockMerchantServiceMockRecorder is the mock recorder for MockMerchantService.
type MockMerchantServiceMockRecorder struct {
	mock *MockMerchantService
}

// NewMockMerchantService creates a new mock instance.
func NewMockMerchantService(ctrl *gomock.Controller) *MockMerchantService {
	mock := &MockMerchantService{ctrl: ctrl}
	mock.recorder = &MockMerchantServiceMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockMerchantService) EXPECT() *MockMerchantServiceMockRecorder {
	return m.recorder
}

// CreateMerchant mocks base method.
func (m *MockMerchantService) CreateMerchant(arg0 context.Context, arg1 *merchant.Merchant) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateMerchant", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// CreateMerchant indicates an expected call of CreateMerchant.
func (mr *MockMerchantServiceMockRecorder) CreateMerchant(arg0, arg1 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateMerchant", reflect.TypeOf((*MockMerchantService)(nil).CreateMerchant), arg0, arg1)
}

// DeleteMerchant mocks base method.
func (m *MockMerchantService) DeleteMerchant(arg0 context.Context, arg1 string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteMerchant", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteMerchant indicates an expected call of DeleteMerchant.
func (mr *MockMerchantServiceMockRecorder) DeleteMerchant(arg0, arg1 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteMerchant", reflect.TypeOf((*MockMerchantService)(nil).DeleteMerchant), arg0, arg1)
}

// GetMerchant mocks base method.
func (m *MockMerchantService) GetMerchant(arg0 context.Context, arg1 string) (*merchant.Merchant, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetMerchant", arg0, arg1)
	ret0, _ := ret[0].(*merchant.Merchant)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetMerchant indicates an expected call of GetMerchant.
func (mr *MockMerchantServiceMockRecorder) GetMerchant(arg0, arg1 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetMerchant", reflect.TypeOf((*MockMerchantService)(nil).GetMerchant), arg0, arg1)
}

// ListMerchants mocks base method.
func (m *MockMerchantService) ListMerchants(arg0 context.Context, arg1, arg2 int) ([]*merchant.Merchant, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListMerchants", arg0, arg1, arg2)
	ret0, _ := ret[0].([]*merchant.Merchant)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListMerchants indicates an expected call of ListMerchants.
func (mr *MockMerchantServiceMockRecorder) ListMerchants(arg0, arg1, arg2 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListMerchants", reflect.TypeOf((*MockMerchantService)(nil).ListMerchants), arg0, arg1, arg2)
}

// UpdateMerchant mocks base method.
func (m *MockMerchantService) UpdateMerchant(arg0 context.Context, arg1 *merchant.Merchant) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateMerchant", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// UpdateMerchant indicates an expected call of UpdateMerchant.
func (mr *MockMerchantServiceMockRecorder) UpdateMerchant(arg0, arg1 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateMerchant", reflect.TypeOf((*MockMerchantService)(nil).UpdateMerchant), arg0, arg1)
}

// MockAcquiringBank is a mock of AcquiringBank interface.
type MockAcquiringBank struct {
	ctrl     *gomock.Controller
	recorder *MockAcquiringBankMockRecorder
}

// MockAcquiringBankMockRecorder is the mock recorder for MockAcquiringBank.
type MockAcquiringBankMockRecorder struct {
	mock *MockAcquiringBank
}

// NewMockAcquiringBank creates a new mock instance.
func NewMockAcquiringBank(ctrl *gomock.Controller) *MockAcquiringBank {
	mock := &MockAcquiringBank{ctrl: ctrl}
	mock.recorder = &MockAcquiringBankMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockAcquiringBank) EXPECT() *MockAcquiringBankMockRecorder {
	return m.recorder
}

// ProcessPayment mocks base method.
func (m *MockAcquiringBank) ProcessPayment(arg0 context.Context, arg1 *payment.Payment) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ProcessPayment", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// ProcessPayment indicates an expected call of ProcessPayment.
func (mr *MockAcquiringBankMockRecorder) ProcessPayment(arg0, arg1 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ProcessPayment", reflect.TypeOf((*MockAcquiringBank)(nil).ProcessPayment), arg0, arg1)
}

// ProcessRefund mocks base method.
func (m *MockAcquiringBank) ProcessRefund(arg0 context.Context, arg1 *refund.Refund) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ProcessRefund", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// ProcessRefund indicates an expected call of ProcessRefund.
func (mr *MockAcquiringBankMockRecorder) ProcessRefund(arg0, arg1 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ProcessRefund", reflect.TypeOf((*MockAcquiringBank)(nil).ProcessRefund), arg0, arg1)
}

// SetFailureRate mocks base method.
func (m *MockAcquiringBank) SetFailureRate(arg0 float64) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "SetFailureRate", arg0)
}

// SetFailureRate indicates an expected call of SetFailureRate.
func (mr *MockAcquiringBankMockRecorder) SetFailureRate(arg0 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SetFailureRate", reflect.TypeOf((*MockAcquiringBank)(nil).SetFailureRate), arg0)
}

// SetProcessingDelay mocks base method.
func (m *MockAcquiringBank) SetProcessingDelay(arg0 time.Duration) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "SetProcessingDelay", arg0)
}

// SetProcessingDelay indicates an expected call of SetProcessingDelay.
func (mr *MockAcquiringBankMockRecorder) SetProcessingDelay(arg0 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SetProcessingDelay", reflect.TypeOf((*MockAcquiringBank)(nil).SetProcessingDelay), arg0)
}

// MockPaymentService is a mock of PaymentService interface.
type MockPaymentService struct {
	ctrl     *gomock.Controller
	recorder *MockPaymentServiceMockRecorder
}

// MockPaymentServiceMockRecorder is the mock recorder for MockPaymentService.
type MockPaymentServiceMockRecorder struct {
	mock *MockPaymentService
}

// NewMockPaymentService creates a new mock instance.
func NewMockPaymentService(ctrl *gomock.Controller) *MockPaymentService {
	mock := &MockPaymentService{ctrl: ctrl}
	mock.recorder = &MockPaymentServiceMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockPaymentService) EXPECT() *MockPaymentServiceMockRecorder {
	return m.recorder
}

// CreatePayment mocks base method.
func (m *MockPaymentService) CreatePayment(arg0 context.Context, arg1 *payment.Payment) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreatePayment", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// CreatePayment indicates an expected call of CreatePayment.
func (mr *MockPaymentServiceMockRecorder) CreatePayment(arg0, arg1 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreatePayment", reflect.TypeOf((*MockPaymentService)(nil).CreatePayment), arg0, arg1)
}

// GetPayment mocks base method.
func (m *MockPaymentService) GetPayment(arg0 context.Context, arg1 string) (*payment.Payment, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetPayment", arg0, arg1)
	ret0, _ := ret[0].(*payment.Payment)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetPayment indicates an expected call of GetPayment.
func (mr *MockPaymentServiceMockRecorder) GetPayment(arg0, arg1 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetPayment", reflect.TypeOf((*MockPaymentService)(nil).GetPayment), arg0, arg1)
}

// ListPayments mocks base method.
func (m *MockPaymentService) ListPayments(arg0 context.Context, arg1 string, arg2, arg3 int) ([]*payment.Payment, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListPayments", arg0, arg1, arg2, arg3)
	ret0, _ := ret[0].([]*payment.Payment)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListPayments indicates an expected call of ListPayments.
func (mr *MockPaymentServiceMockRecorder) ListPayments(arg0, arg1, arg2, arg3 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListPayments", reflect.TypeOf((*MockPaymentService)(nil).ListPayments), arg0, arg1, arg2, arg3)
}

// ProcessPayment mocks base method.
func (m *MockPaymentService) ProcessPayment(arg0 context.Context, arg1 string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ProcessPayment", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// ProcessPayment indicates an expected call of ProcessPayment.
func (mr *MockPaymentServiceMockRecorder) ProcessPayment(arg0, arg1 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ProcessPayment", reflect.TypeOf((*MockPaymentService)(nil).ProcessPayment), arg0, arg1)
}

// UpdatePayment mocks base method.
func (m *MockPaymentService) UpdatePayment(arg0 context.Context, arg1 *payment.Payment) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdatePayment", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// UpdatePayment indicates an expected call of UpdatePayment.
func (mr *MockPaymentServiceMockRecorder) UpdatePayment(arg0, arg1 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdatePayment", reflect.TypeOf((*MockPaymentService)(nil).UpdatePayment), arg0, arg1)
}

// MockRefundService is a mock of RefundService interface.
type MockRefundService struct {
	ctrl     *gomock.Controller
	recorder *MockRefundServiceMockRecorder
}

// MockRefundServiceMockRecorder is the mock recorder for MockRefundService.
type MockRefundServiceMockRecorder struct {
	mock *MockRefundService
}

// NewMockRefundService creates a new mock instance.
func NewMockRefundService(ctrl *gomock.Controller) *MockRefundService {
	mock := &MockRefundService{ctrl: ctrl}
	mock.recorder = &MockRefundServiceMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockRefundService) EXPECT() *MockRefundServiceMockRecorder {
	return m.recorder
}

// CreateRefund mocks base method.
func (m *MockRefundService) CreateRefund(arg0 context.Context, arg1 *refund.Refund) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateRefund", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// CreateRefund indicates an expected call of CreateRefund.
func (mr *MockRefundServiceMockRecorder) CreateRefund(arg0, arg1 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateRefund", reflect.TypeOf((*MockRefundService)(nil).CreateRefund), arg0, arg1)
}

// GetRefund mocks base method.
func (m *MockRefundService) GetRefund(arg0 context.Context, arg1 string) (*refund.Refund, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetRefund", arg0, arg1)
	ret0, _ := ret[0].(*refund.Refund)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetRefund indicates an expected call of GetRefund.
func (mr *MockRefundServiceMockRecorder) GetRefund(arg0, arg1 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetRefund", reflect.TypeOf((*MockRefundService)(nil).GetRefund), arg0, arg1)
}

// ListRefunds mocks base method.
func (m *MockRefundService) ListRefunds(arg0 context.Context, arg1 string, arg2, arg3 int) ([]*refund.Refund, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListRefunds", arg0, arg1, arg2, arg3)
	ret0, _ := ret[0].([]*refund.Refund)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListRefunds indicates an expected call of ListRefunds.
func (mr *MockRefundServiceMockRecorder) ListRefunds(arg0, arg1, arg2, arg3 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListRefunds", reflect.TypeOf((*MockRefundService)(nil).ListRefunds), arg0, arg1, arg2, arg3)
}

// ProcessRefund mocks base method.
func (m *MockRefundService) ProcessRefund(arg0 context.Context, arg1 string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ProcessRefund", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// ProcessRefund indicates an expected call of ProcessRefund.
func (mr *MockRefundServiceMockRecorder) ProcessRefund(arg0, arg1 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ProcessRefund", reflect.TypeOf((*MockRefundService)(nil).ProcessRefund), arg0, arg1)
}

// UpdateRefund mocks base method.
func (m *MockRefundService) UpdateRefund(arg0 context.Context, arg1 *refund.Refund) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateRefund", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// UpdateRefund indicates an expected call of UpdateRefund.
func (mr *MockRefundServiceMockRecorder) UpdateRefund(arg0, arg1 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateRefund", reflect.TypeOf((*MockRefundService)(nil).UpdateRefund), arg0, arg1)
}

// MockUserService is a mock of UserService interface.
type MockUserService struct {
	ctrl     *gomock.Controller
	recorder *MockUserServiceMockRecorder
}

// MockUserServiceMockRecorder is the mock recorder for MockUserService.
type MockUserServiceMockRecorder struct {
	mock *MockUserService
}

// NewMockUserService creates a new mock instance.
func NewMockUserService(ctrl *gomock.Controller) *MockUserService {
	mock := &MockUserService{ctrl: ctrl}
	mock.recorder = &MockUserServiceMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockUserService) EXPECT() *MockUserServiceMockRecorder {
	return m.recorder
}

// ChangePassword mocks base method.
func (m *MockUserService) ChangePassword(arg0 context.Context, arg1 string, arg2 *user.ChangePasswordRequest) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ChangePassword", arg0, arg1, arg2)
	ret0, _ := ret[0].(error)
	return ret0
}

// ChangePassword indicates an expected call of ChangePassword.
func (mr *MockUserServiceMockRecorder) ChangePassword(arg0, arg1, arg2 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ChangePassword", reflect.TypeOf((*MockUserService)(nil).ChangePassword), arg0, arg1, arg2)
}

// GetUserByID mocks base method.
func (m *MockUserService) GetUserByID(arg0 context.Context, arg1 string) (*user.User, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetUserByID", arg0, arg1)
	ret0, _ := ret[0].(*user.User)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetUserByID indicates an expected call of GetUserByID.
func (mr *MockUserServiceMockRecorder) GetUserByID(arg0, arg1 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetUserByID", reflect.TypeOf((*MockUserService)(nil).GetUserByID), arg0, arg1)
}

// Login mocks base method.
func (m *MockUserService) Login(arg0 context.Context, arg1 *user.LoginRequest) (*user.User, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Login", arg0, arg1)
	ret0, _ := ret[0].(*user.User)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Login indicates an expected call of Login.
func (mr *MockUserServiceMockRecorder) Login(arg0, arg1 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Login", reflect.TypeOf((*MockUserService)(nil).Login), arg0, arg1)
}

// Register mocks base method.
func (m *MockUserService) Register(arg0 context.Context, arg1 *user.RegisterRequest) (*user.User, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Register", arg0, arg1)
	ret0, _ := ret[0].(*user.User)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Register indicates an expected call of Register.
func (mr *MockUserServiceMockRecorder) Register(arg0, arg1 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Register", reflect.TypeOf((*MockUserService)(nil).Register), arg0, arg1)
}

// UpdateProfile mocks base method.
func (m *MockUserService) UpdateProfile(arg0 context.Context, arg1 string, arg2 *user.UpdateProfileRequest) (*user.User, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateProfile", arg0, arg1, arg2)
	ret0, _ := ret[0].(*user.User)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UpdateProfile indicates an expected call of UpdateProfile.
func (mr *MockUserServiceMockRecorder) UpdateProfile(arg0, arg1, arg2 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateProfile", reflect.TypeOf((*MockUserService)(nil).UpdateProfile), arg0, arg1, arg2)
}

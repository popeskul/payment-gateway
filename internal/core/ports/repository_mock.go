// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/popeskul/payment-gateway/internal/core/ports (interfaces: Repositories,MerchantRepository,PaymentRepository,RefundRepository,UserRepository)
//
// Generated by this command:
//
//	mockgen -destination=repository_mock.go -package=ports github.com/popeskul/payment-gateway/internal/core/ports Repositories,MerchantRepository,PaymentRepository,RefundRepository,UserRepository
//

// Package ports is a generated GoMock package.
package ports

import (
	context "context"
	reflect "reflect"

	merchant "github.com/popeskul/payment-gateway/internal/core/domain/merchant"
	payment "github.com/popeskul/payment-gateway/internal/core/domain/payment"
	refund "github.com/popeskul/payment-gateway/internal/core/domain/refund"
	user "github.com/popeskul/payment-gateway/internal/core/domain/user"
	gomock "go.uber.org/mock/gomock"
)

// MockRepositories is a mock of Repositories interface.
type MockRepositories struct {
	ctrl     *gomock.Controller
	recorder *MockRepositoriesMockRecorder
}

// MockRepositoriesMockRecorder is the mock recorder for MockRepositories.
type MockRepositoriesMockRecorder struct {
	mock *MockRepositories
}

// NewMockRepositories creates a new mock instance.
func NewMockRepositories(ctrl *gomock.Controller) *MockRepositories {
	mock := &MockRepositories{ctrl: ctrl}
	mock.recorder = &MockRepositoriesMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockRepositories) EXPECT() *MockRepositoriesMockRecorder {
	return m.recorder
}

// Merchants mocks base method.
func (m *MockRepositories) Merchants() MerchantRepository {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Merchants")
	ret0, _ := ret[0].(MerchantRepository)
	return ret0
}

// Merchants indicates an expected call of Merchants.
func (mr *MockRepositoriesMockRecorder) Merchants() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Merchants", reflect.TypeOf((*MockRepositories)(nil).Merchants))
}

// Payments mocks base method.
func (m *MockRepositories) Payments() PaymentRepository {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Payments")
	ret0, _ := ret[0].(PaymentRepository)
	return ret0
}

// Payments indicates an expected call of Payments.
func (mr *MockRepositoriesMockRecorder) Payments() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Payments", reflect.TypeOf((*MockRepositories)(nil).Payments))
}

// Refunds mocks base method.
func (m *MockRepositories) Refunds() RefundRepository {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Refunds")
	ret0, _ := ret[0].(RefundRepository)
	return ret0
}

// Refunds indicates an expected call of Refunds.
func (mr *MockRepositoriesMockRecorder) Refunds() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Refunds", reflect.TypeOf((*MockRepositories)(nil).Refunds))
}

// Users mocks base method.
func (m *MockRepositories) Users() UserRepository {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Users")
	ret0, _ := ret[0].(UserRepository)
	return ret0
}

// Users indicates an expected call of Users.
func (mr *MockRepositoriesMockRecorder) Users() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Users", reflect.TypeOf((*MockRepositories)(nil).Users))
}

// MockMerchantRepository is a mock of MerchantRepository interface.
type MockMerchantRepository struct {
	ctrl     *gomock.Controller
	recorder *MockMerchantRepositoryMockRecorder
}

// MockMerchantRepositoryMockRecorder is the mock recorder for MockMerchantRepository.
type MockMerchantRepositoryMockRecorder struct {
	mock *MockMerchantRepository
}

// NewMockMerchantRepository creates a new mock instance.
func NewMockMerchantRepository(ctrl *gomock.Controller) *MockMerchantRepository {
	mock := &MockMerchantRepository{ctrl: ctrl}
	mock.recorder = &MockMerchantRepositoryMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockMerchantRepository) EXPECT() *MockMerchantRepositoryMockRecorder {
	return m.recorder
}

// Create mocks base method.
func (m *MockMerchantRepository) Create(arg0 context.Context, arg1 *merchant.Merchant) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Create", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// Create indicates an expected call of Create.
func (mr *MockMerchantRepositoryMockRecorder) Create(arg0, arg1 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Create", reflect.TypeOf((*MockMerchantRepository)(nil).Create), arg0, arg1)
}

// Delete mocks base method.
func (m *MockMerchantRepository) Delete(arg0 context.Context, arg1 string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Delete", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// Delete indicates an expected call of Delete.
func (mr *MockMerchantRepositoryMockRecorder) Delete(arg0, arg1 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Delete", reflect.TypeOf((*MockMerchantRepository)(nil).Delete), arg0, arg1)
}

// GetByEmail mocks base method.
func (m *MockMerchantRepository) GetByEmail(arg0 context.Context, arg1 string) (*merchant.Merchant, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetByEmail", arg0, arg1)
	ret0, _ := ret[0].(*merchant.Merchant)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetByEmail indicates an expected call of GetByEmail.
func (mr *MockMerchantRepositoryMockRecorder) GetByEmail(arg0, arg1 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetByEmail", reflect.TypeOf((*MockMerchantRepository)(nil).GetByEmail), arg0, arg1)
}

// GetByID mocks base method.
func (m *MockMerchantRepository) GetByID(arg0 context.Context, arg1 string) (*merchant.Merchant, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetByID", arg0, arg1)
	ret0, _ := ret[0].(*merchant.Merchant)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetByID indicates an expected call of GetByID.
func (mr *MockMerchantRepositoryMockRecorder) GetByID(arg0, arg1 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetByID", reflect.TypeOf((*MockMerchantRepository)(nil).GetByID), arg0, arg1)
}

// List mocks base method.
func (m *MockMerchantRepository) List(arg0 context.Context, arg1, arg2 int) ([]*merchant.Merchant, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "List", arg0, arg1, arg2)
	ret0, _ := ret[0].([]*merchant.Merchant)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// List indicates an expected call of List.
func (mr *MockMerchantRepositoryMockRecorder) List(arg0, arg1, arg2 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "List", reflect.TypeOf((*MockMerchantRepository)(nil).List), arg0, arg1, arg2)
}

// Update mocks base method.
func (m *MockMerchantRepository) Update(arg0 context.Context, arg1 *merchant.Merchant) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Update", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// Update indicates an expected call of Update.
func (mr *MockMerchantRepositoryMockRecorder) Update(arg0, arg1 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Update", reflect.TypeOf((*MockMerchantRepository)(nil).Update), arg0, arg1)
}

// MockPaymentRepository is a mock of PaymentRepository interface.
type MockPaymentRepository struct {
	ctrl     *gomock.Controller
	recorder *MockPaymentRepositoryMockRecorder
}

// MockPaymentRepositoryMockRecorder is the mock recorder for MockPaymentRepository.
type MockPaymentRepositoryMockRecorder struct {
	mock *MockPaymentRepository
}

// NewMockPaymentRepository creates a new mock instance.
func NewMockPaymentRepository(ctrl *gomock.Controller) *MockPaymentRepository {
	mock := &MockPaymentRepository{ctrl: ctrl}
	mock.recorder = &MockPaymentRepositoryMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockPaymentRepository) EXPECT() *MockPaymentRepositoryMockRecorder {
	return m.recorder
}

// Create mocks base method.
func (m *MockPaymentRepository) Create(arg0 context.Context, arg1 *payment.Payment) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Create", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// Create indicates an expected call of Create.
func (mr *MockPaymentRepositoryMockRecorder) Create(arg0, arg1 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Create", reflect.TypeOf((*MockPaymentRepository)(nil).Create), arg0, arg1)
}

// GetByID mocks base method.
func (m *MockPaymentRepository) GetByID(arg0 context.Context, arg1 string) (*payment.Payment, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetByID", arg0, arg1)
	ret0, _ := ret[0].(*payment.Payment)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetByID indicates an expected call of GetByID.
func (mr *MockPaymentRepositoryMockRecorder) GetByID(arg0, arg1 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetByID", reflect.TypeOf((*MockPaymentRepository)(nil).GetByID), arg0, arg1)
}

// List mocks base method.
func (m *MockPaymentRepository) List(arg0 context.Context, arg1 string, arg2, arg3 int) ([]*payment.Payment, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "List", arg0, arg1, arg2, arg3)
	ret0, _ := ret[0].([]*payment.Payment)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// List indicates an expected call of List.
func (mr *MockPaymentRepositoryMockRecorder) List(arg0, arg1, arg2, arg3 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "List", reflect.TypeOf((*MockPaymentRepository)(nil).List), arg0, arg1, arg2, arg3)
}

// Update mocks base method.
func (m *MockPaymentRepository) Update(arg0 context.Context, arg1 *payment.Payment) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Update", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// Update indicates an expected call of Update.
func (mr *MockPaymentRepositoryMockRecorder) Update(arg0, arg1 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Update", reflect.TypeOf((*MockPaymentRepository)(nil).Update), arg0, arg1)
}

// UpdateStatus mocks base method.
func (m *MockPaymentRepository) UpdateStatus(arg0 context.Context, arg1 string, arg2 payment.PaymentStatus) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateStatus", arg0, arg1, arg2)
	ret0, _ := ret[0].(error)
	return ret0
}

// UpdateStatus indicates an expected call of UpdateStatus.
func (mr *MockPaymentRepositoryMockRecorder) UpdateStatus(arg0, arg1, arg2 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateStatus", reflect.TypeOf((*MockPaymentRepository)(nil).UpdateStatus), arg0, arg1, arg2)
}

// MockRefundRepository is a mock of RefundRepository interface.
type MockRefundRepository struct {
	ctrl     *gomock.Controller
	recorder *MockRefundRepositoryMockRecorder
}

// MockRefundRepositoryMockRecorder is the mock recorder for MockRefundRepository.
type MockRefundRepositoryMockRecorder struct {
	mock *MockRefundRepository
}

// NewMockRefundRepository creates a new mock instance.
func NewMockRefundRepository(ctrl *gomock.Controller) *MockRefundRepository {
	mock := &MockRefundRepository{ctrl: ctrl}
	mock.recorder = &MockRefundRepositoryMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockRefundRepository) EXPECT() *MockRefundRepositoryMockRecorder {
	return m.recorder
}

// Create mocks base method.
func (m *MockRefundRepository) Create(arg0 context.Context, arg1 *refund.Refund) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Create", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// Create indicates an expected call of Create.
func (mr *MockRefundRepositoryMockRecorder) Create(arg0, arg1 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Create", reflect.TypeOf((*MockRefundRepository)(nil).Create), arg0, arg1)
}

// GetByID mocks base method.
func (m *MockRefundRepository) GetByID(arg0 context.Context, arg1 string) (*refund.Refund, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetByID", arg0, arg1)
	ret0, _ := ret[0].(*refund.Refund)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetByID indicates an expected call of GetByID.
func (mr *MockRefundRepositoryMockRecorder) GetByID(arg0, arg1 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetByID", reflect.TypeOf((*MockRefundRepository)(nil).GetByID), arg0, arg1)
}

// List mocks base method.
func (m *MockRefundRepository) List(arg0 context.Context, arg1 string, arg2, arg3 int) ([]*refund.Refund, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "List", arg0, arg1, arg2, arg3)
	ret0, _ := ret[0].([]*refund.Refund)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// List indicates an expected call of List.
func (mr *MockRefundRepositoryMockRecorder) List(arg0, arg1, arg2, arg3 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "List", reflect.TypeOf((*MockRefundRepository)(nil).List), arg0, arg1, arg2, arg3)
}

// Update mocks base method.
func (m *MockRefundRepository) Update(arg0 context.Context, arg1 *refund.Refund) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Update", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// Update indicates an expected call of Update.
func (mr *MockRefundRepositoryMockRecorder) Update(arg0, arg1 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Update", reflect.TypeOf((*MockRefundRepository)(nil).Update), arg0, arg1)
}

// UpdateStatus mocks base method.
func (m *MockRefundRepository) UpdateStatus(arg0 context.Context, arg1 string, arg2 refund.RefundStatus) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateStatus", arg0, arg1, arg2)
	ret0, _ := ret[0].(error)
	return ret0
}

// UpdateStatus indicates an expected call of UpdateStatus.
func (mr *MockRefundRepositoryMockRecorder) UpdateStatus(arg0, arg1, arg2 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateStatus", reflect.TypeOf((*MockRefundRepository)(nil).UpdateStatus), arg0, arg1, arg2)
}

// UpdateWithTransaction mocks base method.
func (m *MockRefundRepository) UpdateWithTransaction(arg0 context.Context, arg1 *refund.Refund, arg2 *payment.Payment) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateWithTransaction", arg0, arg1, arg2)
	ret0, _ := ret[0].(error)
	return ret0
}

// UpdateWithTransaction indicates an expected call of UpdateWithTransaction.
func (mr *MockRefundRepositoryMockRecorder) UpdateWithTransaction(arg0, arg1, arg2 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateWithTransaction", reflect.TypeOf((*MockRefundRepository)(nil).UpdateWithTransaction), arg0, arg1, arg2)
}

// MockUserRepository is a mock of UserRepository interface.
type MockUserRepository struct {
	ctrl     *gomock.Controller
	recorder *MockUserRepositoryMockRecorder
}

// MockUserRepositoryMockRecorder is the mock recorder for MockUserRepository.
type MockUserRepositoryMockRecorder struct {
	mock *MockUserRepository
}

// NewMockUserRepository creates a new mock instance.
func NewMockUserRepository(ctrl *gomock.Controller) *MockUserRepository {
	mock := &MockUserRepository{ctrl: ctrl}
	mock.recorder = &MockUserRepositoryMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockUserRepository) EXPECT() *MockUserRepositoryMockRecorder {
	return m.recorder
}

// Create mocks base method.
func (m *MockUserRepository) Create(arg0 context.Context, arg1 *user.User) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Create", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// Create indicates an expected call of Create.
func (mr *MockUserRepositoryMockRecorder) Create(arg0, arg1 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Create", reflect.TypeOf((*MockUserRepository)(nil).Create), arg0, arg1)
}

// GetByEmail mocks base method.
func (m *MockUserRepository) GetByEmail(arg0 context.Context, arg1 string) (*user.User, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetByEmail", arg0, arg1)
	ret0, _ := ret[0].(*user.User)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetByEmail indicates an expected call of GetByEmail.
func (mr *MockUserRepositoryMockRecorder) GetByEmail(arg0, arg1 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetByEmail", reflect.TypeOf((*MockUserRepository)(nil).GetByEmail), arg0, arg1)
}

// GetByID mocks base method.
func (m *MockUserRepository) GetByID(arg0 context.Context, arg1 string) (*user.User, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetByID", arg0, arg1)
	ret0, _ := ret[0].(*user.User)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetByID indicates an expected call of GetByID.
func (mr *MockUserRepositoryMockRecorder) GetByID(arg0, arg1 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetByID", reflect.TypeOf((*MockUserRepository)(nil).GetByID), arg0, arg1)
}

// Update mocks base method.
func (m *MockUserRepository) Update(arg0 context.Context, arg1 *user.User) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Update", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// Update indicates an expected call of Update.
func (mr *MockUserRepositoryMockRecorder) Update(arg0, arg1 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Update", reflect.TypeOf((*MockUserRepository)(nil).Update), arg0, arg1)
}

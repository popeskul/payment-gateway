// Package api provides primitives to interact with the openapi HTTP API.
//
// Code generated by github.com/oapi-codegen/oapi-codegen/v2 version v2.3.0 DO NOT EDIT.
package api

import (
	"bytes"
	"compress/gzip"
	"context"
	"encoding/base64"
	"fmt"
	"net/http"
	"net/url"
	"path"
	"strings"
	"time"

	"github.com/getkin/kin-openapi/openapi3"
	"github.com/go-chi/chi/v5"
	"github.com/oapi-codegen/runtime"
	openapi_types "github.com/oapi-codegen/runtime/types"
)

const (
	BearerAuthScopes = "BearerAuth.Scopes"
)

// Defines values for PaymentStatus.
const (
	PaymentStatusCompleted PaymentStatus = "completed"
	PaymentStatusFailed    PaymentStatus = "failed"
	PaymentStatusPending   PaymentStatus = "pending"
)

// Defines values for PaymentRequestCurrency.
const (
	EUR PaymentRequestCurrency = "EUR"
	RUB PaymentRequestCurrency = "RUB"
	USD PaymentRequestCurrency = "USD"
)

// Defines values for PaymentResponseStatus.
const (
	PaymentResponseStatusFailed  PaymentResponseStatus = "failed"
	PaymentResponseStatusSuccess PaymentResponseStatus = "success"
)

// Defines values for RefundStatus.
const (
	RefundStatusCompleted RefundStatus = "completed"
	RefundStatusFailed    RefundStatus = "failed"
	RefundStatusPending   RefundStatus = "pending"
)

// Defines values for RefundResponseStatus.
const (
	RefundResponseStatusFailed  RefundResponseStatus = "failed"
	RefundResponseStatusSuccess RefundResponseStatus = "success"
)

// AuthResponse defines model for AuthResponse.
type AuthResponse struct {
	AccessToken  *string `json:"accessToken,omitempty"`
	RefreshToken *string `json:"refreshToken,omitempty"`
}

// ChangePasswordRequest defines model for ChangePasswordRequest.
type ChangePasswordRequest struct {
	NewPassword string `json:"newPassword"`
	OldPassword string `json:"oldPassword"`
}

// Error defines model for Error.
type Error struct {
	Code    *int    `json:"code,omitempty"`
	Message *string `json:"message,omitempty"`
}

// LoginRequest defines model for LoginRequest.
type LoginRequest struct {
	Email    openapi_types.Email `json:"email"`
	Password string              `json:"password"`
}

// Merchant defines model for Merchant.
type Merchant struct {
	ApiKey    *string    `json:"apiKey,omitempty"`
	CreatedAt *time.Time `json:"createdAt,omitempty"`
	Email     *string    `json:"email,omitempty"`
	Id        *string    `json:"id,omitempty"`
	Name      *string    `json:"name,omitempty"`
	UpdatedAt *time.Time `json:"updatedAt,omitempty"`
}

// MerchantRequest defines model for MerchantRequest.
type MerchantRequest struct {
	Email string `json:"email"`
	Name  string `json:"name"`
}

// Payment defines model for Payment.
type Payment struct {
	Amount        *float32       `json:"amount,omitempty"`
	CreatedAt     *time.Time     `json:"createdAt,omitempty"`
	Currency      *string        `json:"currency,omitempty"`
	Description   *string        `json:"description,omitempty"`
	Id            *string        `json:"id,omitempty"`
	MerchantId    *string        `json:"merchantId,omitempty"`
	PaymentMethod *string        `json:"paymentMethod,omitempty"`
	Status        *PaymentStatus `json:"status,omitempty"`
	UpdatedAt     *time.Time     `json:"updatedAt,omitempty"`
}

// PaymentStatus defines model for Payment.Status.
type PaymentStatus string

// PaymentRequest defines model for PaymentRequest.
type PaymentRequest struct {
	Amount        float32                `json:"amount"`
	Currency      PaymentRequestCurrency `json:"currency"`
	Description   *string                `json:"description,omitempty"`
	MerchantId    string                 `json:"merchantId"`
	PaymentMethod string                 `json:"paymentMethod"`
}

// PaymentRequestCurrency defines model for PaymentRequest.Currency.
type PaymentRequestCurrency string

// PaymentResponse defines model for PaymentResponse.
type PaymentResponse struct {
	PaymentId     *string                `json:"paymentId,omitempty"`
	Status        *PaymentResponseStatus `json:"status,omitempty"`
	TransactionId *string                `json:"transactionId,omitempty"`
}

// PaymentResponseStatus defines model for PaymentResponse.Status.
type PaymentResponseStatus string

// RefreshTokenRequest defines model for RefreshTokenRequest.
type RefreshTokenRequest struct {
	RefreshToken string `json:"refreshToken"`
}

// Refund defines model for Refund.
type Refund struct {
	Amount    *float32      `json:"amount,omitempty"`
	CreatedAt *time.Time    `json:"createdAt,omitempty"`
	Id        *string       `json:"id,omitempty"`
	PaymentId *string       `json:"paymentId,omitempty"`
	Reason    *string       `json:"reason,omitempty"`
	Status    *RefundStatus `json:"status,omitempty"`
	UpdatedAt *time.Time    `json:"updatedAt,omitempty"`
}

// RefundStatus defines model for Refund.Status.
type RefundStatus string

// RefundRequest defines model for RefundRequest.
type RefundRequest struct {
	Amount    float32 `json:"amount"`
	PaymentId string  `json:"paymentId"`
	Reason    string  `json:"reason"`
}

// RefundResponse defines model for RefundResponse.
type RefundResponse struct {
	Amount   *float32              `json:"amount,omitempty"`
	RefundId *string               `json:"refundId,omitempty"`
	Status   *RefundResponseStatus `json:"status,omitempty"`
}

// RefundResponseStatus defines model for RefundResponse.Status.
type RefundResponseStatus string

// RegisterRequest defines model for RegisterRequest.
type RegisterRequest struct {
	Email     openapi_types.Email `json:"email"`
	FirstName string              `json:"firstName"`
	LastName  string              `json:"lastName"`
	Password  string              `json:"password"`
}

// UpdateProfileRequest defines model for UpdateProfileRequest.
type UpdateProfileRequest struct {
	FirstName *string `json:"firstName,omitempty"`
	LastName  *string `json:"lastName,omitempty"`
}

// UserProfile defines model for UserProfile.
type UserProfile struct {
	Email     *string `json:"email,omitempty"`
	FirstName *string `json:"firstName,omitempty"`
	Id        *string `json:"id,omitempty"`
	LastName  *string `json:"lastName,omitempty"`
}

// BadRequest defines model for BadRequest.
type BadRequest = Error

// NotFound defines model for NotFound.
type NotFound = Error

// Unauthorized defines model for Unauthorized.
type Unauthorized = Error

// ListMerchantsParams defines parameters for ListMerchants.
type ListMerchantsParams struct {
	Limit  *int `form:"limit,omitempty" json:"limit,omitempty"`
	Offset *int `form:"offset,omitempty" json:"offset,omitempty"`
}

// ListPaymentsParams defines parameters for ListPayments.
type ListPaymentsParams struct {
	Limit  *int `form:"limit,omitempty" json:"limit,omitempty"`
	Offset *int `form:"offset,omitempty" json:"offset,omitempty"`
}

// ListRefundsParams defines parameters for ListRefunds.
type ListRefundsParams struct {
	PaymentId string `form:"paymentId" json:"paymentId"`
	Limit     *int   `form:"limit,omitempty" json:"limit,omitempty"`
	Offset    *int   `form:"offset,omitempty" json:"offset,omitempty"`
}

// ChangePasswordJSONRequestBody defines body for ChangePassword for application/json ContentType.
type ChangePasswordJSONRequestBody = ChangePasswordRequest

// LoginUserJSONRequestBody defines body for LoginUser for application/json ContentType.
type LoginUserJSONRequestBody = LoginRequest

// CreateMerchantJSONRequestBody defines body for CreateMerchant for application/json ContentType.
type CreateMerchantJSONRequestBody = MerchantRequest

// UpdateMerchantJSONRequestBody defines body for UpdateMerchant for application/json ContentType.
type UpdateMerchantJSONRequestBody = MerchantRequest

// CreatePaymentJSONRequestBody defines body for CreatePayment for application/json ContentType.
type CreatePaymentJSONRequestBody = PaymentRequest

// UpdateUserProfileJSONRequestBody defines body for UpdateUserProfile for application/json ContentType.
type UpdateUserProfileJSONRequestBody = UpdateProfileRequest

// RefreshTokenJSONRequestBody defines body for RefreshToken for application/json ContentType.
type RefreshTokenJSONRequestBody = RefreshTokenRequest

// CreateRefundJSONRequestBody defines body for CreateRefund for application/json ContentType.
type CreateRefundJSONRequestBody = RefundRequest

// RegisterUserJSONRequestBody defines body for RegisterUser for application/json ContentType.
type RegisterUserJSONRequestBody = RegisterRequest

// ServerInterface represents all server handlers.
type ServerInterface interface {
	// Change user password
	// (POST /change-password)
	ChangePassword(w http.ResponseWriter, r *http.Request)
	// User login
	// (POST /login)
	LoginUser(w http.ResponseWriter, r *http.Request)
	// User logout
	// (POST /logout)
	LogoutUser(w http.ResponseWriter, r *http.Request)
	// List merchants
	// (GET /merchants)
	ListMerchants(w http.ResponseWriter, r *http.Request, params ListMerchantsParams)
	// Create a new merchant
	// (POST /merchants)
	CreateMerchant(w http.ResponseWriter, r *http.Request)
	// Delete merchant
	// (DELETE /merchants/{id})
	DeleteMerchant(w http.ResponseWriter, r *http.Request, id string)
	// Get merchant details
	// (GET /merchants/{id})
	GetMerchant(w http.ResponseWriter, r *http.Request, id string)
	// Update merchant
	// (PUT /merchants/{id})
	UpdateMerchant(w http.ResponseWriter, r *http.Request, id string)
	// List payments
	// (GET /payments)
	ListPayments(w http.ResponseWriter, r *http.Request, params ListPaymentsParams)
	// Create a new payment
	// (POST /payments)
	CreatePayment(w http.ResponseWriter, r *http.Request)
	// Get payment details
	// (GET /payments/{id})
	GetPayment(w http.ResponseWriter, r *http.Request, id string)
	// Process payment
	// (POST /payments/{id}/process)
	ProcessPayment(w http.ResponseWriter, r *http.Request, id string)
	// Get user profile
	// (GET /profile)
	GetUserProfile(w http.ResponseWriter, r *http.Request)
	// Update user profile
	// (PUT /profile)
	UpdateUserProfile(w http.ResponseWriter, r *http.Request)
	// Refresh access token
	// (POST /refresh)
	RefreshToken(w http.ResponseWriter, r *http.Request)
	// List refunds
	// (GET /refunds)
	ListRefunds(w http.ResponseWriter, r *http.Request, params ListRefundsParams)
	// Create a refund
	// (POST /refunds)
	CreateRefund(w http.ResponseWriter, r *http.Request)
	// Get refund details
	// (GET /refunds/{id})
	GetRefund(w http.ResponseWriter, r *http.Request, id string)
	// Process refund
	// (POST /refunds/{id}/process)
	ProcessRefund(w http.ResponseWriter, r *http.Request, id string)
	// Register a new user
	// (POST /register)
	RegisterUser(w http.ResponseWriter, r *http.Request)
}

// Unimplemented server implementation that returns http.StatusNotImplemented for each endpoint.

type Unimplemented struct{}

// Change user password
// (POST /change-password)
func (_ Unimplemented) ChangePassword(w http.ResponseWriter, r *http.Request) {
	w.WriteHeader(http.StatusNotImplemented)
}

// User login
// (POST /login)
func (_ Unimplemented) LoginUser(w http.ResponseWriter, r *http.Request) {
	w.WriteHeader(http.StatusNotImplemented)
}

// User logout
// (POST /logout)
func (_ Unimplemented) LogoutUser(w http.ResponseWriter, r *http.Request) {
	w.WriteHeader(http.StatusNotImplemented)
}

// List merchants
// (GET /merchants)
func (_ Unimplemented) ListMerchants(w http.ResponseWriter, r *http.Request, params ListMerchantsParams) {
	w.WriteHeader(http.StatusNotImplemented)
}

// Create a new merchant
// (POST /merchants)
func (_ Unimplemented) CreateMerchant(w http.ResponseWriter, r *http.Request) {
	w.WriteHeader(http.StatusNotImplemented)
}

// Delete merchant
// (DELETE /merchants/{id})
func (_ Unimplemented) DeleteMerchant(w http.ResponseWriter, r *http.Request, id string) {
	w.WriteHeader(http.StatusNotImplemented)
}

// Get merchant details
// (GET /merchants/{id})
func (_ Unimplemented) GetMerchant(w http.ResponseWriter, r *http.Request, id string) {
	w.WriteHeader(http.StatusNotImplemented)
}

// Update merchant
// (PUT /merchants/{id})
func (_ Unimplemented) UpdateMerchant(w http.ResponseWriter, r *http.Request, id string) {
	w.WriteHeader(http.StatusNotImplemented)
}

// List payments
// (GET /payments)
func (_ Unimplemented) ListPayments(w http.ResponseWriter, r *http.Request, params ListPaymentsParams) {
	w.WriteHeader(http.StatusNotImplemented)
}

// Create a new payment
// (POST /payments)
func (_ Unimplemented) CreatePayment(w http.ResponseWriter, r *http.Request) {
	w.WriteHeader(http.StatusNotImplemented)
}

// Get payment details
// (GET /payments/{id})
func (_ Unimplemented) GetPayment(w http.ResponseWriter, r *http.Request, id string) {
	w.WriteHeader(http.StatusNotImplemented)
}

// Process payment
// (POST /payments/{id}/process)
func (_ Unimplemented) ProcessPayment(w http.ResponseWriter, r *http.Request, id string) {
	w.WriteHeader(http.StatusNotImplemented)
}

// Get user profile
// (GET /profile)
func (_ Unimplemented) GetUserProfile(w http.ResponseWriter, r *http.Request) {
	w.WriteHeader(http.StatusNotImplemented)
}

// Update user profile
// (PUT /profile)
func (_ Unimplemented) UpdateUserProfile(w http.ResponseWriter, r *http.Request) {
	w.WriteHeader(http.StatusNotImplemented)
}

// Refresh access token
// (POST /refresh)
func (_ Unimplemented) RefreshToken(w http.ResponseWriter, r *http.Request) {
	w.WriteHeader(http.StatusNotImplemented)
}

// List refunds
// (GET /refunds)
func (_ Unimplemented) ListRefunds(w http.ResponseWriter, r *http.Request, params ListRefundsParams) {
	w.WriteHeader(http.StatusNotImplemented)
}

// Create a refund
// (POST /refunds)
func (_ Unimplemented) CreateRefund(w http.ResponseWriter, r *http.Request) {
	w.WriteHeader(http.StatusNotImplemented)
}

// Get refund details
// (GET /refunds/{id})
func (_ Unimplemented) GetRefund(w http.ResponseWriter, r *http.Request, id string) {
	w.WriteHeader(http.StatusNotImplemented)
}

// Process refund
// (POST /refunds/{id}/process)
func (_ Unimplemented) ProcessRefund(w http.ResponseWriter, r *http.Request, id string) {
	w.WriteHeader(http.StatusNotImplemented)
}

// Register a new user
// (POST /register)
func (_ Unimplemented) RegisterUser(w http.ResponseWriter, r *http.Request) {
	w.WriteHeader(http.StatusNotImplemented)
}

// ServerInterfaceWrapper converts contexts to parameters.
type ServerInterfaceWrapper struct {
	Handler            ServerInterface
	HandlerMiddlewares []MiddlewareFunc
	ErrorHandlerFunc   func(w http.ResponseWriter, r *http.Request, err error)
}

type MiddlewareFunc func(http.Handler) http.Handler

// ChangePassword operation middleware
func (siw *ServerInterfaceWrapper) ChangePassword(w http.ResponseWriter, r *http.Request) {
	ctx := r.Context()

	ctx = context.WithValue(ctx, BearerAuthScopes, []string{})

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.ChangePassword(w, r)
	}))

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r.WithContext(ctx))
}

// LoginUser operation middleware
func (siw *ServerInterfaceWrapper) LoginUser(w http.ResponseWriter, r *http.Request) {
	ctx := r.Context()

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.LoginUser(w, r)
	}))

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r.WithContext(ctx))
}

// LogoutUser operation middleware
func (siw *ServerInterfaceWrapper) LogoutUser(w http.ResponseWriter, r *http.Request) {
	ctx := r.Context()

	ctx = context.WithValue(ctx, BearerAuthScopes, []string{})

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.LogoutUser(w, r)
	}))

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r.WithContext(ctx))
}

// ListMerchants operation middleware
func (siw *ServerInterfaceWrapper) ListMerchants(w http.ResponseWriter, r *http.Request) {
	ctx := r.Context()

	var err error

	ctx = context.WithValue(ctx, BearerAuthScopes, []string{})

	// Parameter object where we will unmarshal all parameters from the context
	var params ListMerchantsParams

	// ------------- Optional query parameter "limit" -------------

	err = runtime.BindQueryParameter("form", true, false, "limit", r.URL.Query(), &params.Limit)
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "limit", Err: err})
		return
	}

	// ------------- Optional query parameter "offset" -------------

	err = runtime.BindQueryParameter("form", true, false, "offset", r.URL.Query(), &params.Offset)
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "offset", Err: err})
		return
	}

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.ListMerchants(w, r, params)
	}))

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r.WithContext(ctx))
}

// CreateMerchant operation middleware
func (siw *ServerInterfaceWrapper) CreateMerchant(w http.ResponseWriter, r *http.Request) {
	ctx := r.Context()

	ctx = context.WithValue(ctx, BearerAuthScopes, []string{})

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.CreateMerchant(w, r)
	}))

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r.WithContext(ctx))
}

// DeleteMerchant operation middleware
func (siw *ServerInterfaceWrapper) DeleteMerchant(w http.ResponseWriter, r *http.Request) {
	ctx := r.Context()

	var err error

	// ------------- Path parameter "id" -------------
	var id string

	err = runtime.BindStyledParameterWithOptions("simple", "id", chi.URLParam(r, "id"), &id, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "id", Err: err})
		return
	}

	ctx = context.WithValue(ctx, BearerAuthScopes, []string{})

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.DeleteMerchant(w, r, id)
	}))

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r.WithContext(ctx))
}

// GetMerchant operation middleware
func (siw *ServerInterfaceWrapper) GetMerchant(w http.ResponseWriter, r *http.Request) {
	ctx := r.Context()

	var err error

	// ------------- Path parameter "id" -------------
	var id string

	err = runtime.BindStyledParameterWithOptions("simple", "id", chi.URLParam(r, "id"), &id, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "id", Err: err})
		return
	}

	ctx = context.WithValue(ctx, BearerAuthScopes, []string{})

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.GetMerchant(w, r, id)
	}))

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r.WithContext(ctx))
}

// UpdateMerchant operation middleware
func (siw *ServerInterfaceWrapper) UpdateMerchant(w http.ResponseWriter, r *http.Request) {
	ctx := r.Context()

	var err error

	// ------------- Path parameter "id" -------------
	var id string

	err = runtime.BindStyledParameterWithOptions("simple", "id", chi.URLParam(r, "id"), &id, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "id", Err: err})
		return
	}

	ctx = context.WithValue(ctx, BearerAuthScopes, []string{})

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.UpdateMerchant(w, r, id)
	}))

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r.WithContext(ctx))
}

// ListPayments operation middleware
func (siw *ServerInterfaceWrapper) ListPayments(w http.ResponseWriter, r *http.Request) {
	ctx := r.Context()

	var err error

	ctx = context.WithValue(ctx, BearerAuthScopes, []string{})

	// Parameter object where we will unmarshal all parameters from the context
	var params ListPaymentsParams

	// ------------- Optional query parameter "limit" -------------

	err = runtime.BindQueryParameter("form", true, false, "limit", r.URL.Query(), &params.Limit)
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "limit", Err: err})
		return
	}

	// ------------- Optional query parameter "offset" -------------

	err = runtime.BindQueryParameter("form", true, false, "offset", r.URL.Query(), &params.Offset)
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "offset", Err: err})
		return
	}

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.ListPayments(w, r, params)
	}))

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r.WithContext(ctx))
}

// CreatePayment operation middleware
func (siw *ServerInterfaceWrapper) CreatePayment(w http.ResponseWriter, r *http.Request) {
	ctx := r.Context()

	ctx = context.WithValue(ctx, BearerAuthScopes, []string{})

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.CreatePayment(w, r)
	}))

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r.WithContext(ctx))
}

// GetPayment operation middleware
func (siw *ServerInterfaceWrapper) GetPayment(w http.ResponseWriter, r *http.Request) {
	ctx := r.Context()

	var err error

	// ------------- Path parameter "id" -------------
	var id string

	err = runtime.BindStyledParameterWithOptions("simple", "id", chi.URLParam(r, "id"), &id, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "id", Err: err})
		return
	}

	ctx = context.WithValue(ctx, BearerAuthScopes, []string{})

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.GetPayment(w, r, id)
	}))

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r.WithContext(ctx))
}

// ProcessPayment operation middleware
func (siw *ServerInterfaceWrapper) ProcessPayment(w http.ResponseWriter, r *http.Request) {
	ctx := r.Context()

	var err error

	// ------------- Path parameter "id" -------------
	var id string

	err = runtime.BindStyledParameterWithOptions("simple", "id", chi.URLParam(r, "id"), &id, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "id", Err: err})
		return
	}

	ctx = context.WithValue(ctx, BearerAuthScopes, []string{})

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.ProcessPayment(w, r, id)
	}))

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r.WithContext(ctx))
}

// GetUserProfile operation middleware
func (siw *ServerInterfaceWrapper) GetUserProfile(w http.ResponseWriter, r *http.Request) {
	ctx := r.Context()

	ctx = context.WithValue(ctx, BearerAuthScopes, []string{})

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.GetUserProfile(w, r)
	}))

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r.WithContext(ctx))
}

// UpdateUserProfile operation middleware
func (siw *ServerInterfaceWrapper) UpdateUserProfile(w http.ResponseWriter, r *http.Request) {
	ctx := r.Context()

	ctx = context.WithValue(ctx, BearerAuthScopes, []string{})

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.UpdateUserProfile(w, r)
	}))

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r.WithContext(ctx))
}

// RefreshToken operation middleware
func (siw *ServerInterfaceWrapper) RefreshToken(w http.ResponseWriter, r *http.Request) {
	ctx := r.Context()

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.RefreshToken(w, r)
	}))

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r.WithContext(ctx))
}

// ListRefunds operation middleware
func (siw *ServerInterfaceWrapper) ListRefunds(w http.ResponseWriter, r *http.Request) {
	ctx := r.Context()

	var err error

	ctx = context.WithValue(ctx, BearerAuthScopes, []string{})

	// Parameter object where we will unmarshal all parameters from the context
	var params ListRefundsParams

	// ------------- Required query parameter "paymentId" -------------

	if paramValue := r.URL.Query().Get("paymentId"); paramValue != "" {

	} else {
		siw.ErrorHandlerFunc(w, r, &RequiredParamError{ParamName: "paymentId"})
		return
	}

	err = runtime.BindQueryParameter("form", true, true, "paymentId", r.URL.Query(), &params.PaymentId)
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "paymentId", Err: err})
		return
	}

	// ------------- Optional query parameter "limit" -------------

	err = runtime.BindQueryParameter("form", true, false, "limit", r.URL.Query(), &params.Limit)
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "limit", Err: err})
		return
	}

	// ------------- Optional query parameter "offset" -------------

	err = runtime.BindQueryParameter("form", true, false, "offset", r.URL.Query(), &params.Offset)
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "offset", Err: err})
		return
	}

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.ListRefunds(w, r, params)
	}))

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r.WithContext(ctx))
}

// CreateRefund operation middleware
func (siw *ServerInterfaceWrapper) CreateRefund(w http.ResponseWriter, r *http.Request) {
	ctx := r.Context()

	ctx = context.WithValue(ctx, BearerAuthScopes, []string{})

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.CreateRefund(w, r)
	}))

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r.WithContext(ctx))
}

// GetRefund operation middleware
func (siw *ServerInterfaceWrapper) GetRefund(w http.ResponseWriter, r *http.Request) {
	ctx := r.Context()

	var err error

	// ------------- Path parameter "id" -------------
	var id string

	err = runtime.BindStyledParameterWithOptions("simple", "id", chi.URLParam(r, "id"), &id, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "id", Err: err})
		return
	}

	ctx = context.WithValue(ctx, BearerAuthScopes, []string{})

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.GetRefund(w, r, id)
	}))

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r.WithContext(ctx))
}

// ProcessRefund operation middleware
func (siw *ServerInterfaceWrapper) ProcessRefund(w http.ResponseWriter, r *http.Request) {
	ctx := r.Context()

	var err error

	// ------------- Path parameter "id" -------------
	var id string

	err = runtime.BindStyledParameterWithOptions("simple", "id", chi.URLParam(r, "id"), &id, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "id", Err: err})
		return
	}

	ctx = context.WithValue(ctx, BearerAuthScopes, []string{})

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.ProcessRefund(w, r, id)
	}))

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r.WithContext(ctx))
}

// RegisterUser operation middleware
func (siw *ServerInterfaceWrapper) RegisterUser(w http.ResponseWriter, r *http.Request) {
	ctx := r.Context()

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.RegisterUser(w, r)
	}))

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r.WithContext(ctx))
}

type UnescapedCookieParamError struct {
	ParamName string
	Err       error
}

func (e *UnescapedCookieParamError) Error() string {
	return fmt.Sprintf("error unescaping cookie parameter '%s'", e.ParamName)
}

func (e *UnescapedCookieParamError) Unwrap() error {
	return e.Err
}

type UnmarshalingParamError struct {
	ParamName string
	Err       error
}

func (e *UnmarshalingParamError) Error() string {
	return fmt.Sprintf("Error unmarshaling parameter %s as JSON: %s", e.ParamName, e.Err.Error())
}

func (e *UnmarshalingParamError) Unwrap() error {
	return e.Err
}

type RequiredParamError struct {
	ParamName string
}

func (e *RequiredParamError) Error() string {
	return fmt.Sprintf("Query argument %s is required, but not found", e.ParamName)
}

type RequiredHeaderError struct {
	ParamName string
	Err       error
}

func (e *RequiredHeaderError) Error() string {
	return fmt.Sprintf("Header parameter %s is required, but not found", e.ParamName)
}

func (e *RequiredHeaderError) Unwrap() error {
	return e.Err
}

type InvalidParamFormatError struct {
	ParamName string
	Err       error
}

func (e *InvalidParamFormatError) Error() string {
	return fmt.Sprintf("Invalid format for parameter %s: %s", e.ParamName, e.Err.Error())
}

func (e *InvalidParamFormatError) Unwrap() error {
	return e.Err
}

type TooManyValuesForParamError struct {
	ParamName string
	Count     int
}

func (e *TooManyValuesForParamError) Error() string {
	return fmt.Sprintf("Expected one value for %s, got %d", e.ParamName, e.Count)
}

// Handler creates http.Handler with routing matching OpenAPI spec.
func Handler(si ServerInterface) http.Handler {
	return HandlerWithOptions(si, ChiServerOptions{})
}

type ChiServerOptions struct {
	BaseURL          string
	BaseRouter       chi.Router
	Middlewares      []MiddlewareFunc
	ErrorHandlerFunc func(w http.ResponseWriter, r *http.Request, err error)
}

// HandlerFromMux creates http.Handler with routing matching OpenAPI spec based on the provided mux.
func HandlerFromMux(si ServerInterface, r chi.Router) http.Handler {
	return HandlerWithOptions(si, ChiServerOptions{
		BaseRouter: r,
	})
}

func HandlerFromMuxWithBaseURL(si ServerInterface, r chi.Router, baseURL string) http.Handler {
	return HandlerWithOptions(si, ChiServerOptions{
		BaseURL:    baseURL,
		BaseRouter: r,
	})
}

// HandlerWithOptions creates http.Handler with additional options
func HandlerWithOptions(si ServerInterface, options ChiServerOptions) http.Handler {
	r := options.BaseRouter

	if r == nil {
		r = chi.NewRouter()
	}
	if options.ErrorHandlerFunc == nil {
		options.ErrorHandlerFunc = func(w http.ResponseWriter, r *http.Request, err error) {
			http.Error(w, err.Error(), http.StatusBadRequest)
		}
	}
	wrapper := ServerInterfaceWrapper{
		Handler:            si,
		HandlerMiddlewares: options.Middlewares,
		ErrorHandlerFunc:   options.ErrorHandlerFunc,
	}

	r.Group(func(r chi.Router) {
		r.Post(options.BaseURL+"/change-password", wrapper.ChangePassword)
	})
	r.Group(func(r chi.Router) {
		r.Post(options.BaseURL+"/login", wrapper.LoginUser)
	})
	r.Group(func(r chi.Router) {
		r.Post(options.BaseURL+"/logout", wrapper.LogoutUser)
	})
	r.Group(func(r chi.Router) {
		r.Get(options.BaseURL+"/merchants", wrapper.ListMerchants)
	})
	r.Group(func(r chi.Router) {
		r.Post(options.BaseURL+"/merchants", wrapper.CreateMerchant)
	})
	r.Group(func(r chi.Router) {
		r.Delete(options.BaseURL+"/merchants/{id}", wrapper.DeleteMerchant)
	})
	r.Group(func(r chi.Router) {
		r.Get(options.BaseURL+"/merchants/{id}", wrapper.GetMerchant)
	})
	r.Group(func(r chi.Router) {
		r.Put(options.BaseURL+"/merchants/{id}", wrapper.UpdateMerchant)
	})
	r.Group(func(r chi.Router) {
		r.Get(options.BaseURL+"/payments", wrapper.ListPayments)
	})
	r.Group(func(r chi.Router) {
		r.Post(options.BaseURL+"/payments", wrapper.CreatePayment)
	})
	r.Group(func(r chi.Router) {
		r.Get(options.BaseURL+"/payments/{id}", wrapper.GetPayment)
	})
	r.Group(func(r chi.Router) {
		r.Post(options.BaseURL+"/payments/{id}/process", wrapper.ProcessPayment)
	})
	r.Group(func(r chi.Router) {
		r.Get(options.BaseURL+"/profile", wrapper.GetUserProfile)
	})
	r.Group(func(r chi.Router) {
		r.Put(options.BaseURL+"/profile", wrapper.UpdateUserProfile)
	})
	r.Group(func(r chi.Router) {
		r.Post(options.BaseURL+"/refresh", wrapper.RefreshToken)
	})
	r.Group(func(r chi.Router) {
		r.Get(options.BaseURL+"/refunds", wrapper.ListRefunds)
	})
	r.Group(func(r chi.Router) {
		r.Post(options.BaseURL+"/refunds", wrapper.CreateRefund)
	})
	r.Group(func(r chi.Router) {
		r.Get(options.BaseURL+"/refunds/{id}", wrapper.GetRefund)
	})
	r.Group(func(r chi.Router) {
		r.Post(options.BaseURL+"/refunds/{id}/process", wrapper.ProcessRefund)
	})
	r.Group(func(r chi.Router) {
		r.Post(options.BaseURL+"/register", wrapper.RegisterUser)
	})

	return r
}

// Base64 encoded, gzipped, json marshaled Swagger object
var swaggerSpec = []string{

	"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",
}

// GetSwagger returns the content of the embedded swagger specification file
// or error if failed to decode
func decodeSpec() ([]byte, error) {
	zipped, err := base64.StdEncoding.DecodeString(strings.Join(swaggerSpec, ""))
	if err != nil {
		return nil, fmt.Errorf("error base64 decoding spec: %w", err)
	}
	zr, err := gzip.NewReader(bytes.NewReader(zipped))
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %w", err)
	}
	var buf bytes.Buffer
	_, err = buf.ReadFrom(zr)
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %w", err)
	}

	return buf.Bytes(), nil
}

var rawSpec = decodeSpecCached()

// a naive cached of a decoded swagger spec
func decodeSpecCached() func() ([]byte, error) {
	data, err := decodeSpec()
	return func() ([]byte, error) {
		return data, err
	}
}

// Constructs a synthetic filesystem for resolving external references when loading openapi specifications.
func PathToRawSpec(pathToFile string) map[string]func() ([]byte, error) {
	res := make(map[string]func() ([]byte, error))
	if len(pathToFile) > 0 {
		res[pathToFile] = rawSpec
	}

	return res
}

// GetSwagger returns the Swagger specification corresponding to the generated code
// in this file. The external references of Swagger specification are resolved.
// The logic of resolving external references is tightly connected to "import-mapping" feature.
// Externally referenced files must be embedded in the corresponding golang packages.
// Urls can be supported but this task was out of the scope.
func GetSwagger() (swagger *openapi3.T, err error) {
	resolvePath := PathToRawSpec("")

	loader := openapi3.NewLoader()
	loader.IsExternalRefsAllowed = true
	loader.ReadFromURIFunc = func(loader *openapi3.Loader, url *url.URL) ([]byte, error) {
		pathToFile := url.String()
		pathToFile = path.Clean(pathToFile)
		getSpec, ok := resolvePath[pathToFile]
		if !ok {
			err1 := fmt.Errorf("path not found: %s", pathToFile)
			return nil, err1
		}
		return getSpec()
	}
	var specData []byte
	specData, err = rawSpec()
	if err != nil {
		return
	}
	swagger, err = loader.LoadFromData(specData)
	if err != nil {
		return
	}
	return
}
